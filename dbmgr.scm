(define helpful-message (lambda (line)
	(let ((name (car line)))
		(begin
			(display "Usage information:") (newline)
			(display "    ") (display name) (display " lookup <dat1> in <rep1>") (newline)
			(display "    ") (display name) (display " print <dat1> of <rep1>") (newline)
			(display "    ") (display name) (display " register <dat1> with <rep1>") (newline)
			(display "    ") (display name) (display " remove <dat1> from <rep1>") (newline)
			(display "    ") (display name) (display " list <rep1>") (newline)
			(display "    ") (display name) (display " duplicate <dat1> to <dat2> within <rep1>") (newline)
		)
	)
	(display (car line))
))

(define fn-lookup (lambda (dat rep)
	(display dat) (newline)
	(display rep) (newline)
))

(define fn-print (lambda (dat rep)
	(display dat) (newline)
	(display rep) (newline)
))

(define fn-register (lambda (dat rep)
	(display dat) (newline)
	(display rep) (newline)
))

(define fn-remove (lambda (dat rep)
	(display dat) (newline)
	(display rep) (newline)
))

(define fn-list (lambda (rep)
	(display rep) (newline)
))

(define fn-duplicate (lambda (dat1 dat2 rep)
	(display dat1) (newline)
	(display dat2) (newline)
	(display rep) (newline)
))

(define parse-command-line (lambda (line)
	(cond
		((< (length line) 3) 
			(helpful-message line)
		)
		((string=? (cadr line) "lookup") 
			(if (and (string=? (cadddr line) "in") (= (length line) 5)) 
				(fn-lookup (caddr line) (cadddr (cdr line))) 
				(helpful-message line)
			)
		)
		((string=? (cadr line) "print") 
			(if (and (string=? (cadddr line) "of") (= (length line) 5)) 
				(fn-print (caddr line) (cadddr (cdr line))) 
				(helpful-message line)
			)
		)
		((string=? (cadr line) "register") 
			(if (and (string=? (cadddr line) "with") (= (length line) 5)) 
				(fn-register (caddr line) (cadddr (cdr line))) 
				(helpful-message line)
			)
		)
		((string=? (cadr line) "remove") 
			(if (and (string=? (cadddr line) "from") (= (length line) 5)) 
				(fn-remove (caddr line) (cadddr (cdr line))) 
				(helpful-message line)
			)
		)
		((string=? (cadr line) "list") 
			(if (= (length line) 3) 
				(fn-list (caddr line)) 
				(helpful-message line)
			)
		)
		((string=? (cadr line) "duplicate") 
			(if (and (string=? (cadddr line) "to") (string=? (cadddr (cddr line)) "within") (= (length line) 7)) 
				(fn-duplicate (caddr line) (cadddr (cdr line)) (cadddr (cdddr line))) 
				(helpful-message line)
			)
		)
		(else 
			(helpful-message line)
		)
	)
))

(parse-command-line (command-line))